import Slimbot from 'slimbot';
import { program } from 'commander';
import { red, green, yellow } from 'chalk';

import { getDbTools } from './src/db';
import {
    ADMINS,
    START_COMMANDS,
    STOP_COMMANDS,
    HELP_COMMANDS,
    CONFIRM_COMMANDS,
    DECLINE_COMMANDS,
    RESERVED_USERS
} from './src/const';
import { makePairs } from './src/helpers';

let apiKey = process.env.npm_config_apikey;

if (!apiKey) {
    program.option('-k, --key <type>', 'api key');
    program.parse(process.argv);
    apiKey = program.key;
}

if (!apiKey) {
    console.error(red('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∫–ª—é—á API –±–æ—Ç–∞. yarn start -key "YOUR:KEY"'));
    process.exit();
}

const socks5proxy = {
    socksHost: process.env['SOCKS5_HOST'], //required
    socksPort: process.env['SOCKS5_PORT'], //required
    socksUsername: process.env['SOCKS5_USER'], //optional
    socksPassword: process.env['SOCKS5_PASSWORD'] //optional
};



class Slimbot2 extends Slimbot {
    startPolling(callback) {
      return super.getUpdates(this._offset, callback)
      .then(updates => {
        if (updates !== undefined) {
          this._processUpdates(updates);
        }
        return null;
      })
      .catch(error => {
        if (callback) {
          callback(error);
        }
        else {
          throw error;
        }
      })
      .finally(() => {
        this._timeout = setTimeout(() => this.startPolling(callback), 100);
      });
    }
  
  }

(async () => {
    let dbTools = await getDbTools();
    console.log(yellow('–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'), await dbTools.getConfig());
    await dbTools.setConfigOption('confirmation', 1);
    const slimbot = new Slimbot2(apiKey);

    slimbot.on('message', async ({ text = '', chat: { username, id: chatId } }) => {
        try {
            const config = await dbTools.getConfig();
            const message = text.toLowerCase();
            if (START_COMMANDS.includes(message)) {
                if (RESERVED_USERS.includes(username)) {
                    console.log(username);

                    await dbTools.addUser(username, chatId, 1);
                    slimbot.sendMessage(chatId, "–¢—ã —Ä–µ–∑–µ—Ä–≤–Ω—ã–π!") // todo
                    return;
                }
                if (ADMINS.includes(username)) {
                    slimbot.sendMessage(chatId, "–¢—ã –∞–¥–º–∏–Ω!") // todo
                    return;
                }
                if (!username) {
                    slimbot.sendMessage(chatId, "–£ —Ç–µ–±—è –Ω–µ—Ç username –¥–æ–±–∞–≤—å –µ–≥–æ –∏ –Ω–∞—á–Ω–∏ —Å –Ω–∞—á–∞–ª–∞!") // todo
                    return;
                }
                await dbTools.addUser(username, chatId);
                slimbot.sendMessage(chatId, 
                    `–ü—Ä–∏–≤–µ—Ç üëã \n\n–ú—ã –≤ –ö–æ–Ω—Ç—É—Ä–µ –ø—Ä–∏–¥—É–º–∞–ª–∏ –∫–∞–∫ –∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å –æ—Ñ–ª–∞–Ω-–∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ ` +
                    `–∏ —Å–º–æ–ª–ª—Ç–æ–∫–∏ —É –∫—É–ª–µ—Ä–∞ –≤ —É–¥–∞–ª—ë–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∏ –Ω–∞–ø–∏—Å–∞–ª–∏ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑ –≤ ` +
                    `–¥–µ–Ω—å —Å–ª—É—á–∞–π–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –ø–∞—Ä—ã. –ò–≥—Ä—É –º—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∏ –≤ ` +
                    `–ø—Ä–µ–¥–¥–≤–µ—Ä–∏–∏ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π JUG Ru Group –ø–æ –Ω–∞—à–∏–º –ª—é–±–∏–º—ã–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º. –ü–æ—ç—Ç–æ–º—É –≤ ` +
                    `–æ—Å–Ω–æ–≤–Ω–æ–º —Ç—É—Ç –±—É–¥—É—Ç –æ–±–∏—Ç–∞—Ç—å –¥–æ—Ç–Ω–µ—Ç-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏, —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∏ –∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ—Ä—ã. \n\n` +
                    
                    `–¢—ã –ø–æ—Å—Ç—É—á–∞–ª—Å—è –≤ –±–æ—Ç–∞, –∞ –∑–Ω–∞—á–∏—Ç, —É–∂–µ —Å—Ç–∞–ª —É—á–∞—Å—Ç–Ω–∏–∫–æ–º ` +
                    `–í 11:00 (–ú—Å–∫) –±–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç —Ç–µ–±—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –±–ª–∏–∂–∞–π—à–µ–º –∫—Ä—É–≥–µ. –¢—ã —Å–º–æ–∂–µ—à—å:\n` +
                    `‚Äî —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /go, \n` +
                    `‚Äî –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –Ω–∞ —Å—É—Ç–∫–∏ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–æ–π /nottoday \n` +
                    `‚Äî –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /stop.\n\n` +

                    `–ï—Å–ª–∏ –∑–∞–ø—É—Ç–∞–µ—à—å—Å—è –∏–ª–∏ –∑–∞–±—É–¥–µ—à—å –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–±–∏—Ä–∞–π /help.`
                )

            } else if (STOP_COMMANDS.includes(message)) {
                await dbTools.deleteUser(username);
            } else if (HELP_COMMANDS.includes(message)) {
                slimbot.sendMessage(chatId, 
                        `–¢—ã –º–æ–∂–µ—à—å –æ–±—â–∞—Ç—å—Å—è —Å –±–æ—Ç–æ–º –ø—Ä–∏ –ø–æ–º–æ—â–∏ —ç—Ç–∏—Ö –∫–æ–º–∞–Ω–¥: \n` +
                        `/start ‚Äî —Å—Ç–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º \n` +
                        `/stop ‚Äî –≤—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã \n\n` +
                        
                        `/help ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ \n\n` +
                        
                        `–ó–∞ —á–∞—Å –¥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–æ—Ç —Å–ø—Ä–æ—Å–∏—Ç —É —Ç–µ–±—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —É—á–∞—Å—Ç–∏–µ ` +
                        `–≤ –±–ª–∏–∂–∞–π—à–µ–º –∫—Ä—É–≥–µ: \n`+
                        `/go ‚Äî —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –±–ª–∏–∂–∞–π—à–∏–µ —Å—É—Ç–∫–∏ \n` +
                        `/nottoday ‚Äî –Ω–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å –¥–æ –∑–∞–≤—Ç—Ä–∞`    
                    );
            } else {
                if (config.confirmation === 1) {
                    if (CONFIRM_COMMANDS.includes(message)) {
                        await dbTools.confirmUser(username);
                        slimbot.sendMessage(
                            chatId,
                            '–û—Ç–ª–∏—á–Ω–æ! –°–∫–æ—Ä–æ –º—ã –ø—Ä–∏—à–ª—ë–º —Ç–µ–±–µ –∏–º—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.'
                        );
                        return;
                    }
                    if (DECLINE_COMMANDS.includes(message)) {
                        slimbot.sendMessage(
                            chatId,
                                '–ñ–∞–ª—å, —Å–µ–≥–æ–¥–Ω—è –Ω–µ —É–≤–∏–¥–∏–º—Å—è. –î–æ –∑–∞–≤—Ç—Ä–∞!\n' +
                                `–ú–æ–∂–µ—Ç, –ø–æ–∫–∞ –ø–æ—Å–º–æ—Ç—Ä–∏—à—å –¢–µ—Ö–ö–æ–Ω—Ç—É—Ä.–¢–í? \n` +
                                `https://www.youtube.com/watch?v=NSJqnhc3FvI&feature=youtu.be \n\n` +
                                '–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞ –Ω–∞—Å–æ–≤—Å–µ–º, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /stop.'
                        );
                        return;
                    }
                }
                if (ADMINS.includes(username)) {
                    if (message === '/config') {
                        slimbot.sendMessage(chatId, JSON.stringify(config));
                    }
                    if (message === '/users') {
                        const users = await dbTools.getAllUsers(null);
                        users
                            .sort((a, b) => (a.active > b.active ? -1 : a.active === b.active ? 0 : 1))
                            .forEach(user => {
                                slimbot.sendMessage(
                                    chatId,
                                    `${user.active ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ –∞–∫—Ç–∏–≤–µ–Ω'} | ${user.nickname}: ${user.id}`
                                );
                            });
                    }
                    if (message === '/dusers') {
                        const users = await dbTools.getAllDeletedUsers();
                        users.forEach(user => {
                            slimbot.sendMessage(chatId, user.nickname);
                        });
                    }
                    if (message === '/pairs') {
                        const lastPairOrderId = await dbTools.getLastPairOrderId();
                        const pairs = await dbTools.getAllPairs(lastPairOrderId);
                        if (!pairs || pairs.length === 0) {
                            slimbot.sendMessage(chatId, '–ù–µ—Ç –ø–∞—Ä');
                        }
                        pairs.forEach(({ nickname1, nickname2 }) => {
                            slimbot.sendMessage(chatId, `@${nickname1} & @${nickname2}`);
                        });
                    }
                    if (message === '/mix') {
                        const users = await dbTools.getAllUsers(1);
                        if (users.length < 2) {
                            slimbot.sendMessage(chatId, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä');
                            return;
                        }
                        const pairs = await dbTools.getAllPairs();
                        const newPairs = makePairs(
                            users.map(user => user.nickname),
                            pairs.map(pair => [pair.nickname1, pair.nickname2])
                        );
                        if (!newPairs.length){
                            slimbot.sendMessage(chatId, `–ü–∞—Ä—ã –∫–æ–Ω—á–∏–ª–∏—Å—å`);
                            return;
                        }
                        const lastPairOrderId = await dbTools.getLastPairOrderId();
                        for (const [user1, user2] of newPairs) {
                            await dbTools.addPair(user1, user2, lastPairOrderId + 1);
                            slimbot.sendMessage(chatId, `–°–æ—Å—Ç–∞–≤–∏–ª –ø–∞—Ä—É @${user1} c @${user2}`);
                        }
                    }
                    if (message === '/reminder') {
                        const users = await dbTools.getAllUsers(0);

                        users.forEach((user) => {
                            slimbot.sendMessage(user.id, "–ê–∫—Ç–∏–≤–∏—Ä—É–π —Å–ª—ã—à!");
                        })
                        slimbot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∏—è');
                    }
                    if (message === '/notify') {
                        const users = await dbTools.getAllUsers(null);
                        const lastPairOrderId = await dbTools.getLastPairOrderId();
                        const pairs = await dbTools.getAllPairs(lastPairOrderId);
                        console.log(users, lastPairOrderId, pairs);
                        pairs.forEach(({ nickname1, nickname2 }) => {
                            const user1 = users.find(user => user.nickname === nickname1);
                            const user2 = users.find(user => user.nickname === nickname2);
                            slimbot.sendMessage(user1.id, `–í–∂—É—Ö! –ú—ã –Ω–∞—à–ª–∏ —Ç–µ–±–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. –°–µ–≥–æ–¥–Ω—è —ç—Ç–æ @${user2.nickname}. –ù–∞–ª–∏–≤–∞–π —á–∞—à–µ—á–∫—É –∫–æ—Ñ–µ –∏ —Å–∫–æ—Ä–µ–µ –¥–æ–≥–æ–≤–æ—Ä–∏–≤–∞–π—Å—è –æ —Å–æ–∑–≤–æ–Ω–µ!`);
                            slimbot.sendMessage(user2.id, `–í–∂—É—Ö! –ú—ã –Ω–∞—à–ª–∏ —Ç–µ–±–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. –°–µ–≥–æ–¥–Ω—è —ç—Ç–æ @${user1.nickname}. –ù–∞–ª–∏–≤–∞–π —á–∞—à–µ—á–∫—É –∫–æ—Ñ–µ –∏ —Å–∫–æ—Ä–µ–µ –¥–æ–≥–æ–≤–æ—Ä–∏–≤–∞–π—Å—è –æ —Å–æ–∑–≤–æ–Ω–µ!`);
                            console.log(user1?.id, user2?.nickname);
                            console.log(user2?.id, user1?.nickname);
                        });
                        await dbTools.resetUsers();
                        slimbot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –¥–ª—è –±–µ—Å–µ–¥—ã –∏ —Å–±—Ä–æ—Å–∏–ª–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—é');
                    }
                    return; 
                }
                slimbot.sendMessage(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ñ–º–∏ /help –¥–ª—è –≤—ã–∑–æ–≤–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏.');
            }
        } catch (e) {
            console.error(e);
        }
    });

    slimbot.startPolling();
    console.log(green('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω'));
})();
